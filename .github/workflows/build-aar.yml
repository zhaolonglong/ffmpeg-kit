name: Build FFmpegKit Android AAR
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - development
    paths:
      - '.github/workflows/android-build-optimized.yml'
      - 'android/**'
      - '!android/README.md'
      - 'scripts/**'
      - 'tools/**'
      - 'android.sh'
  pull_request:
    branches:
      - main
      - development
    paths:
      - '.github/workflows/android-build-optimized.yml'
      - 'android/**'
      - '!android/README.md'
      - 'scripts/**'
      - 'tools/**'
      - 'android.sh'

jobs:
  build-android-aar:
    name: Build Android AAR (Linux, multi-NDK)
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        ndk-version: [ 'r22b-linux-x86_64', 'r23b-linux', 'r25c-linux', 'r26b-linux' ]
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build python3 unzip

      - name: Set up AdoptOpenJDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Prerequisites cleanup (remove old cmake)
        run: |
          if [ -d "${ANDROID_HOME}/cmdline-tools/latest/bin" ]; then
            ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --uninstall "cmake;3.10.2.4988404" "cmake;3.18.1" || true
          fi

      - name: Set up Android NDK
        run: |
          curl -s "https://dl.google.com/android/repository/android-ndk-${{ matrix.ndk-version }}.zip" -o ndk.zip
          unzip -q -o ndk.zip -d .ndk
          echo "ANDROID_NDK_ROOT=$PWD/.ndk/$(ls .ndk)" >> $GITHUB_ENV

      - name: Ensure android.sh is executable
        run: chmod +x android.sh

      - name: Build ffmpeg-kit (MIT full, LTS)
        run: |
          ./android.sh --lts --full

      - name: List generated AAR files
        run: ls -lh android/build/outputs/aar/

      - name: Upload all AAR artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-kit-aars-${{ matrix.ndk-version }}
          path: android/build/outputs/aar/*.aar

      - name: Upload build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log-${{ matrix.ndk-version }}
          path: android/build.log

      - name: Print build log
        if: always()
        run: cat android/build.log || cat build.log || echo "No build.log found"

      - name: Print ffbuild config log (if failed)
        if: failure()
        run: |
          if [ -f ./src/ffmpeg/ffbuild/config.log ]; then
            tail -50 ./src/ffmpeg/ffbuild/config.log
          fi

  build-android-aar-macos:
    name: Build Android AAR (macOS, multi-NDK)
    runs-on: macos-12
    strategy:
      fail-fast: false
      matrix:
        ndk-version: [ 'r22b-darwin-x86_64', 'r23b-darwin', 'r25c-darwin', 'r26b-darwin' ]
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          brew install cmake ninja python@3

      - name: Set up AdoptOpenJDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Set up Android NDK
        run: |
          curl -s "https://dl.google.com/android/repository/android-ndk-${{ matrix.ndk-version }}.zip" -o ndk.zip
          unzip -q -o ndk.zip -d .ndk
          echo "ANDROID_NDK_ROOT=$PWD/.ndk/$(ls .ndk)" >> $GITHUB_ENV

      - name: Ensure android.sh is executable
        run: chmod +x android.sh

      - name: Build ffmpeg-kit (MIT full, LTS)
        run: |
          ./android.sh --lts --full

      - name: List generated AAR files
        run: ls -lh android/build/outputs/aar/

      - name: Upload all AAR artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-kit-aars-macos-${{ matrix.ndk-version }}
          path: android/build/outputs/aar/*.aar

      - name: Upload build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log-macos-${{ matrix.ndk-version }}
          path: android/build.log

      - name: Print build log
        if: always()
        run: cat android/build.log || cat build.log || echo "No build.log found"

      - name: Print ffbuild config log (if failed)
        if: failure()
        run: |
          if [ -f ./src/ffmpeg/ffbuild/config.log ]; then
            tail -50 ./src/ffmpeg/ffbuild/config.log
          fi
